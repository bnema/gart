// Code generated by MockGen. DO NOT EDIT.
// Source: internal/git/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/git/interface.go -destination=internal/git/mock/mock_repository.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGitRepository is a mock of GitRepository interface.
type MockGitRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGitRepositoryMockRecorder
	isgomock struct{}
}

// MockGitRepositoryMockRecorder is the mock recorder for MockGitRepository.
type MockGitRepositoryMockRecorder struct {
	mock *MockGitRepository
}

// NewMockGitRepository creates a new mock instance.
func NewMockGitRepository(ctrl *gomock.Controller) *MockGitRepository {
	mock := &MockGitRepository{ctrl: ctrl}
	mock.recorder = &MockGitRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitRepository) EXPECT() *MockGitRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockGitRepository) Add(patterns ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range patterns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockGitRepositoryMockRecorder) Add(patterns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockGitRepository)(nil).Add), patterns...)
}

// Commit mocks base method.
func (m *MockGitRepository) Commit(message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockGitRepositoryMockRecorder) Commit(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockGitRepository)(nil).Commit), message)
}

// Exists mocks base method.
func (m *MockGitRepository) Exists() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockGitRepositoryMockRecorder) Exists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockGitRepository)(nil).Exists))
}

// GetWorkingDirectory mocks base method.
func (m *MockGitRepository) GetWorkingDirectory() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkingDirectory")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetWorkingDirectory indicates an expected call of GetWorkingDirectory.
func (mr *MockGitRepositoryMockRecorder) GetWorkingDirectory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkingDirectory", reflect.TypeOf((*MockGitRepository)(nil).GetWorkingDirectory))
}

// HasRemote mocks base method.
func (m *MockGitRepository) HasRemote() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRemote")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasRemote indicates an expected call of HasRemote.
func (mr *MockGitRepositoryMockRecorder) HasRemote() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRemote", reflect.TypeOf((*MockGitRepository)(nil).HasRemote))
}

// Init mocks base method.
func (m *MockGitRepository) Init(branch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", branch)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockGitRepositoryMockRecorder) Init(branch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockGitRepository)(nil).Init), branch)
}

// Push mocks base method.
func (m *MockGitRepository) Push() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push")
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockGitRepositoryMockRecorder) Push() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockGitRepository)(nil).Push))
}

// PushContext mocks base method.
func (m *MockGitRepository) PushContext(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushContext indicates an expected call of PushContext.
func (mr *MockGitRepositoryMockRecorder) PushContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushContext", reflect.TypeOf((*MockGitRepository)(nil).PushContext), ctx)
}

// SetRemote mocks base method.
func (m *MockGitRepository) SetRemote(name, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRemote", name, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRemote indicates an expected call of SetRemote.
func (mr *MockGitRepositoryMockRecorder) SetRemote(name, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRemote", reflect.TypeOf((*MockGitRepository)(nil).SetRemote), name, url)
}

// Status mocks base method.
func (m *MockGitRepository) Status() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockGitRepositoryMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockGitRepository)(nil).Status))
}
